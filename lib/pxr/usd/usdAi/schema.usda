#usda 1.0
(
    "This file describes various Arnold USD schemata for code generation."
    subLayers = [
        @usd/schema.usda@,
        @usdGeom/schema.usda@,
        @usdShade/schema.usda@
    ]
)

def "GLOBAL" (
    customData = {
        string libraryName = "usdAi"
        string libraryPath = "pxr/usd/usdAi"
        # Because I'm including the "Ai" prefix in the schema class names, I'm
        # omitting it from the library prefix so the classes don't end up with
        # names like "UsdAiAiShader".
        string libraryPrefix = "Usd"
        string tokensPrefix = "UsdAi"
        dictionary libraryTokens = {
            dictionary userPrefix = {
                string value = "user:"
                string doc = """The attribute prefix used to qualify user
                                parameters on nodes using the AiNodeAPI."""
            }
        }
    }
)
{
}

class "AiNodeAPI" (
    doc = """API for handling prims as Arnold nodes. Provides a consistent
             interface for getting and setting user parameters."""
) {
}

class "AiShapeAPI" (
    doc = """API for interacting with common Arnold shape parameters on prims.

             Currently handles:
             - The bitmasks `visibility` and `sidedness`
             - The boolean flags `matte`, `opaque`, `self_shadows`, and
               `receive_shadows`.
            
            In case of ray types, there is a difference between the 4th
            and 5th major release of Arnold. We provide both in their
            respective namespace. In case arnold headers are not present
            just use the provided macros.
            USD_ARNOLD_IMPORT_ARNOLD4 pr USD_ARNOLD_IMPORT_ARNOLD5
    
            For Arnold 4
                AI_RAY_UNDEFINED   undefined type
                AI_RAY_CAMERA      ray originating at the camera
                AI_RAY_SHADOW      shadow ray towards a light source
                AI_RAY_REFLECTED   mirror reflection ray
                AI_RAY_REFRACTED   mirror refraction ray
                AI_RAY_SUBSURFACE  subsurface scattering probe ray
                AI_RAY_DIFFUSE     indirect diffuse (also known as diffuse GI) ray
                AI_RAY_GLOSSY      glossy/blurred reflection ray
                AI_RAY_ALL         mask for all ray types
                AI_RAY_GENERIC     mask for all ray types

            For Arnold 5
                AI_RAY_UNDEFINED         undefined type
                AI_RAY_CAMERA            ray originating at the camera
                AI_RAY_SHADOW            shadow ray towards a light source
                AI_RAY_DIFFUSE_TRANSMIT  indirect diffuse transmission ray
                AI_RAY_SPECULAR_TRANSMIT indirect specular transmission ray
                AI_RAY_VOLUME            indirect volume scattering ray
                AI_RAY_DIFFUSE_REFLECT   indirect diffuse reflection ray
                AI_RAY_SPECULAR_REFLECT  indirect specular reflection ray
                AI_RAY_SUBSURFACE        subsurface scattering probe ray

                AI_RAY_ALL_DIFFUSE  all indirect diffuse ray types
                AI_RAY_ALL_SPECULAR all indirect specular ray types
                AI_RAY_ALL_REFLECT  all reflection ray types
                AI_RAY_ALL_TRANSMIT all transmission specular ray types
                AI_RAY_ALL          mask for all ray types"""

    customData = {
        string extraIncludes = """
#include "pxr/usd/usdAi/rayTypes4.h"
#include "pxr/usd/usdAi/rayTypes5.h"
"""
    }
) {
    # --- shape properties --- #

    uniform bool ai:opaque = true (
        doc = """Whether the object should be considered fully opaque. By
                 default all objects are marked as opaque, because it speeds up
                 rendering considerably."""
        customData = {
            string apiName = "aiOpaque"
        }
    )

    uniform bool ai:matte = false (
        doc = """This attribute, when enabled, turns an object or group into a
                 holdout matte. This affects primary rays only.

                 The matte color is always black, and the opacity of the object
                 is preserved. Shaders will not run on the object, and it will
                 output all black (including the alpha), except if the opaque
                 flag is off, in which case shaders will be run to compute the
                 opacity only. Note that even AOVs output by its shaders in this
                 case will be black."""
        customData = {
            string apiName = "aiMatte"
        }
    )

    uniform bool ai:receive_shadows = true (
        doc = """Whether the object picks up shadows from other objects."""
        customData = {
            string apiName = "aiReceiveShadows"
        }
    )

    # visibility

    uniform bool ai:self_shadows = true (
        doc = """Whether the object casts shadows on itself."""
        customData = {
            string apiName = "aiSelfShadows"
        }
    )

    uniform bool ai:visibility:camera = true (
        doc = """Whether the object is visible to camera rays."""
        customData = {
            string apiName = "aiVisibleToCamera"
        }
    )
    uniform bool ai:visibility:shadow = true (
        doc = """Whether the object is visible to shadow rays."""
        customData = {
            string apiName = "aiVisibleToShadow"
        }
    )
    uniform bool ai:visibility:reflected = true (
        doc = """Whether the object is visible to the reflected rays."""
        customData = {
            string apiName = "aiVisibleToReflection"
        }
    )
    uniform bool ai:visibility:refracted = true (
        doc = """Whether the object is visible to the refracted rays."""
        customData = {
            string apiName = "aiVisibleToRefraction"
        }
    )
    uniform bool ai:visibility:subsurface = true (
        doc = """Whether the object is visible to the SSS rays."""
        customData = {
            string apiName = "aiVisibleToSubsurface"
        }
    )
    uniform bool ai:visibility:diffuse = true (
        doc = """Whether the object is visible to the diffuse rays."""
        customData = {
            string apiName = "aiVisibleToDiffuse"
        }
    )
    uniform bool ai:visibility:glossy = true (
        doc = """Whether the object is visible to the glossy rays."""
        customData = {
            string apiName = "aiVisibleToGlossy"
        }
    )

#    (
#        doc = """The visibility of the object for each Arnold ray type, as a
#                 bitmask.
#
#                 You can selectively disable an object's visibility for the
#                 various types of rays in the renderer. By default, objects are
#                 visible to all types of rays."""
#    )

    uniform bool ai:sidedness:camera = true (
        doc = """Whether the object is double-sided to camera rays."""
        customData = {
            string apiName = "aiDoubleSidedToCamera"
        }
    )
    uniform bool ai:sidedness:shadow = true (
        doc = """Whether the object is double-sided to shadow rays."""
        customData = {
            string apiName = "aiDoubleSidedToShadow"
        }
    )
    uniform bool ai:sidedness:reflected = true (
        doc = """Whether the object is double-sided to the reflected rays."""
        customData = {
            string apiName = "aiDoubleSidedToReflection"
        }
    )
    uniform bool ai:sidedness:refracted = true (
        doc = """Whether the object is double-sided to the refracted rays."""
        customData = {
            string apiName = "aiDoubleSidedToRefraction"
        }
    )
    uniform bool ai:sidedness:subsurface = true (
        doc = """Whether the object is double-sided to the SSS rays."""
        customData = {
            string apiName = "aiDoubleSidedToSubsurface"
        }
    )
    uniform bool ai:sidedness:diffuse = true (
        doc = """Whether the object is double-sided to the diffuse rays."""
        customData = {
            string apiName = "aiDoubleSidedToDiffuse"
        }
    )
    uniform bool ai:sidedness:glossy = true (
        doc = """Whether the object is double-sided to the glossy rays."""
        customData = {
            string apiName = "aiDoubleSidedToGlossy"
        }
    )

#    (
#        doc = """The double-sidedness of the object for each Arnold ray type, as
#                 a bitmask.
#
#                 Just as you can disable an object's visibility for specific ray
#                 types, you can also change its sidedness. By default, objects
#                 are double-sided for all rays."""
#    )

    # --- polymesh properties --- #
    uniform bool ai:smoothing = false (
        customData = {
            string apiName = "aiSmoothing"
        }
    )
    uniform token ai:subdiv_type = "none" (
        customData = {
            string apiName = "aiSubdivType"
        }
        allowedTokens = ["none", "catclark", "linear"]
    )
    uniform uint ai:subdiv_iterations = 1 (
        customData = {
            string apiName = "aiSubdivIterations"
        }
    )
    uniform float ai:subdiv_adaptive_error = 0 (
        customData = {
            string apiName = "aiSubdivAdaptiveError"
        }
    )
    uniform token ai:subdiv_adaptive_metric = "auto_" (
        customData = {
            string apiName = "aiSubdivAdaptiveMetric"
        }
        # FIXME: auto -> auto_ (is there a way to specify the API name of a token?)
        allowedTokens = ["auto_", "edge_length", "flatness"]
    )
    uniform token ai:subdiv_adaptive_space = "raster" (
        customData = {
            string apiName = "aiSubdivAdaptiveSpace"
        }
        allowedTokens = ["raster", "object"]
    )
    uniform token ai:subdiv_uv_smoothing = "pin_corners" (
        customData = {
            string apiName = "aiSubdivUVSmoothing"
        }
        allowedTokens = ["pin_corners", "pin_borders", "linear", "smooth"]
    )
    uniform bool ai:subdiv_smooth_derivs = false (
        customData = {
            string apiName = "aiSubdivSmoothDerivs"
        }
    )
    uniform float ai:disp_padding = 0 (
        customData = {
            string apiName = "aiDispPadding"
        }
    )
    uniform float ai:disp_height = 1 (
        customData = {
            string apiName = "aiDispHeight"
        }
    )
    uniform float ai:disp_zero_value = 0 (
        customData = {
            string apiName = "aiDispZeroValue"
        }
    )
    uniform bool ai:disp_autobump = false (
        customData = {
            string apiName = "aiDispAutobump"
        }
    )
    # uniform ai:autobump_visibility = 159
    rel ai:subdiv_dicing_camera

}

class "AiMaterialAPI" (
    doc = """API for Material prims encapsulating Arnold shading networks."""
) {
    rel ai:surface (
        customData = {
            string apiName = "surface"
        }
    )

    rel ai:displacement (
        customData = {
            string apiName = "displacement"
        }
    )
}

class AiShader "AiShader" (
    doc = """Represents an Arnold shader node."""
    inherits = </Shader>
)
{
}

class AiProcedural "AiProcedural" (
    doc = """Represents an Arnold procedural shape node."""
    inherits = </Boundable>
) {
    uniform string dso (
        doc = """A procedural can point to ass, obj, and ply filetypes, or to a
                 dll or so, which will be recognized as a compiled procedural
                 program."""
    )

    string data = "" (
        doc = """This string parameter is used to pass parameters that are
                 parsed by the procedural program and can be used for its
                 creation/initialization.

                 The format of this string is not standard and is dictated by
                 the particular implementation of each procedural program. A
                 better and more compact way of passing parameters and data to
                 the procedural is through user data."""
    )

    uniform bool loat_at_init = false (
        doc = """Whether to force the loading of the procedural during the
                 initialization process."""
        customData = {
            string apiName = "loadAtInit"
        }
    )
}

class AiVolume "AiVolume" (
    doc = """Represents an Arnold volume node.

             This class inherits AiProcedural because Arnold's volume node has
             essentially the same parameters as the procedural node, except for
             a couple of slight variations."""
    inherits = </AiProcedural>
) {
    float step_size = 0 (
        doc = """Sampling step size inside the volume.
                 I think 0 means automatic."""
        customData = {
            string apiName = "stepSize"
        }
    )
}

class AiAOV "AiAOV" (
    inherits = </Typed>
    doc = """Represents an Arnold output target. 

             Defined by a name, a data type, a driver, and a filter."""
) {
    uniform string name (
        doc = """The name of the AOV."""
    )
    token dataType = "RGBA" (
        allowedTokens = ["BYTE", "INT", "UINT", "BOOL", "FLOAT", "RGB", "RGBA", "VECTOR", "POINT", "POINT2", "POINTER", "NODE", "ARRAY", "MATRIX"]
    )
    rel driver
    rel filter
}
